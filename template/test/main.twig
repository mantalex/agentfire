{% block content %}
<div class="container" style=" max-width: 1140px!important;">
    
    <div class="row">
        <div class="col-sm-3 filters">
            <h3>Filters</h3>
            <div class="form-group row">
                <div class="col-sm-12">
                        <div class="btn-group btn-group-toggle"  >
                            <label class="btn btn-secondary active">
                            <input type="radio" name="options" value="0" class="mark" > All Markers
                            </label>
                            <label class="btn btn-secondary">
                            <input type="radio" name="options" value="{{ user_id }}" class="mark" > My markers
                            </label>
                        
                        </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-12">
                    <select class="js-search" style="width:100%;height:40px"  name="search"></select>
                    </div>
                </div>
            <div class="form-group row">
                <div class="col-sm-12">
                    <div class="tags"></div>
                </div>
            </div>
        </div>
        <div class="col-sm-9">
            <div id='map' style='width: 100%; height: 500px;'></div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascript %}
<script>
    mapboxgl.accessToken = '{{ mapbox_token }}';
    const map = new mapboxgl.Map({
    container: 'map', // container ID
    style: 'mapbox://styles/mapbox/streets-v12', // style URL
    center: [-74.5, 40], // starting position [lng, lat]
    zoom: 9, // starting zoom
    });

    map.on('load', () => {
        map.loadImage('{{ plugin_url }}assets/images/marker0.png', (error, image) => {
        if (error) throw error;
        if (!map.hasImage('marker0')) map.addImage('marker0', image);
        });
        map.loadImage('{{ plugin_url }}assets/images/marker1.png', (error, image) => {
        if (error) throw error;
        if (!map.hasImage('marker1')) map.addImage('marker1', image);
        });
        map.loadImage('{{ plugin_url }}assets/images/marker2.png', (error, image) => {
        if (error) throw error;
        if (!map.hasImage('marker2')) map.addImage('marker2', image);
        });
        map.loadImage('{{ plugin_url }}assets/images/marker3.png', (error, image) => {
        if (error) throw error;
        if (!map.hasImage('marker3')) map.addImage('marker3', image);
        });
       
        map.addSource('points', {
            type: 'geojson',
            data: '{{ site_url }}/wp-json/agentfire/v1/test/markers', 
            //clusters: true
        });

        map.addLayer({
            'id': 'points',
            'type': 'symbol',
            'source': 'points',
            'layout': {
                'icon-image': 'marker{user_id}',
                //'icon-image': 'cat',
                'icon-size': 0.3
            }
        });
    });        

    function add_marker (event) {
        if (event.defaultPrevented === false) {
         var marker = new mapboxgl.Marker();
        var coordinates = event.lngLat;
        let form='<h3>Add New Marker</h3><div class="content">'+
                '<form id="myForm" style="padding:10px;">'+
                '<div class="form-group row">'+
                '<label for="name" class="col-sm-12 col-form-label">Name</label>'+
                '<div class="col-sm-12">'+
                    '<input type="text" class="form-control" name="name" placeholder="Name">'+
                    '</div>'+
                '</div>'+
                '<input type="hidden" name="long" value="'+coordinates.lng+'"/>'+
                '<input type="hidden" name="lat" value="'+coordinates.lat+'"/>'+
                '<div class="form-group row">'+
                    '<div class="col-sm-12">Tags</div>'+
                    '<div class="col-sm-12">'+
                    '<div class="form-check">'+
                        '<select class="js-tags " style="width:100%"  name="tags"></select>'+
                    '</div>'+
                    
                    '</div>'+
                '</div>'+
                '<div class="form-group row">'+
                    '<div class="col-sm-12">'+
                    '<button type="submit" class="btn btn-primary">Save</button>'+
                    '</div>'+
                '</div>'+
                '</form>';
        let popup=new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(form)
        .addTo(map);

        $('.js-tags').select2({
            ajax: {
                url: '{{ site_url }}/wp-json/agentfire/v1/test/tags',
                dataType: 'json',
                
            },
            placeholder: 'Select tag',
            multiple: true,
            tags: true
        });

        

        document.getElementById('myForm').addEventListener('submit', function(event) {
                event.preventDefault();

                // Get the form data as a plain object
                var form = event.target;
                var formData = new FormData(form);
                var data = {};
                var tags = [];
                for (var [key, value] of formData.entries()) {
                    //console.log(value);
                    if(key=='tags'){
                        tags.push(value);
                    }else{
                        data[key] = value;
                    }
                  
                }
                data['tags'] = tags; 
                data['user_id']='{{ user_id }}';
                
               
                // Send the data as JSON to the API endpoint using Fetch
                fetch('{{ site_url }}/wp-json/agentfire/v1/test/markers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
                })
                .then(function(response) {
               
                    popup.remove();
                    marker.remove();    
                    data='{{ site_url }}/wp-json/agentfire/v1/test/markers';
                    map.getSource('points').setData(data);
                               
                           
                })
                .catch(function(error) {
                    // Error, handle it here
                });
            });
        }
    }

    
    map.on('click', 'points', (e) => {
        e.preventDefault();
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
        const tags1 = JSON.parse(e.features[0].properties.tags);

        let phtml='<h3>'+description+'</h3><div class="content"><span class="subtitle">Tags: </span><br/>';
        tags1.forEach(function(tag) {
            phtml=phtml+'<label class="pop_tab">'+tag.name+'</label>';
        });
        phtml=phtml+'</div>';
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        
        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(phtml)
            .addTo(map);

    });


    {% if is_logged %}
        map.on('click', add_marker);
    {% endif %}

    

    document.addEventListener("DOMContentLoaded", function() {
				console.log("DOM loaded");
                
                fetch('{{ site_url }}/wp-json/agentfire/v1/test/tags', {
                method: 'GET',
              
                })
                .then(function(response) {
               
                    if (response.ok) {
                        return response.json();
                    } else {
                        return Promise.reject(response);
                    }
                }).then(function (data) {
                    // This is the JSON from our response
                    let elem = document.querySelector ('.tags' )
                    data.results.forEach(function(tag) {
                        let cHtml='<label style="width: 100%;"><input type="checkbox" class="tg" value="'+tag.id+'"> '+tag.text+'</label>';
                        elem.innerHTML=elem.innerHTML+cHtml;
                    });

                    var allmarks = document.querySelectorAll('.mark');
                    // Adding event listener change to each checkbox
                    allmarks.forEach((elem) => { 
                        elem.addEventListener('change', (event) => {
                            allmarks.forEach((elem) => { 
                                elem.parentElement.classList.remove('active');
                            })
                            elem.parentElement.classList.add('active');
                            var item = event.target.value;
                            var data_map='{{ site_url }}/wp-json/agentfire/v1/test/markers?user_id='+item;
                            map.getSource('points').setData(data_map);   
                            
                        });
                    });

                    var allCheckBox = document.querySelectorAll(' .tg');
                    // Adding event listener change to each checkbox
                    allCheckBox.forEach((checkbox) => { 
                        checkbox.addEventListener('change', (event) => {
                                let selTags=[];

                                allCheckBox.forEach((checkbox) => { 
                                    if(checkbox.checked){
                                        selTags.push(checkbox.value)
                                    }
                                })
                                var data_map='{{ site_url }}/wp-json/agentfire/v1/test/markers?tags='+selTags.join(',');
                                map.getSource('points').setData(data_map);
                            
                        });
                    });
                    $('.js-search').select2({
                        ajax: {
                            url: '{{ site_url }}/wp-json/agentfire/v1/test/markers-search',
                            data: function (params) {
                            var query = {
                                search: params.term,
                                page: params.page || 1
                            }

                           
                            return query;
                            }
                            
                        },
                        placeholder: 'Search marker',
                        allowClear: true
                    });

                    $('.js-search').on('select2:select', function (e) {
                        var data = e.params.data;
                        var data_map='{{ site_url }}/wp-json/agentfire/v1/test/markers?marker='+data.id;
                        map.getSource('points').setData(data_map);

                    });
                    $('.js-search').on('select2:unselecting', function (e) {
                        var data = e.params.data;
                        var data_map='{{ site_url }}/wp-json/agentfire/v1/test/markers';
                        map.getSource('points').setData(data_map);

                    });
                    


                }).catch(function(error) {
                    // Error, handle it here
                });

                
			
    });
            
           
           

</script>
{% endblock %}
